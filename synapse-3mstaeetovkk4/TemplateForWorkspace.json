{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-3mstaeetovkk4"
		},
		"adventureworksdw2022dp500_azuresqldatabase_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adventureworksdw2022dp500_azuresqldatabase_linkedservice'"
		},
		"adventureworkslt_azuresqldatabase_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adventureworkslt_azuresqldatabase_linkedservice'"
		},
		"synapse-6i6nkvrr23bng-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-6i6nkvrr23bng-WorkspaceDefaultSqlServer'"
		},
		"datalake_linkedservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://datalake', linkedService().suffix, '.dfs.core.windows.net')}"
		},
		"github_dp_500_http_linkedservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/MicrosoftLearning/DP-500-Azure-Data-Analyst/main/"
		},
		"keyvault_linkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{concat('https://keyvault-', linkedService().suffix, '.vault.azure.net/')}"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pipeline_00_setupdata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline sets up some sample data in the data lake",
				"activities": [
					{
						"name": "ForEachFileNameInParam",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('fileNames')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from Github into ADLS",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "dataset_github_dp_500",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_adls_landingzone_binary",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachSqlTableName",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('sqlTableNames')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data from SQL to Parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_azuresql_adventureworkslt",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_adls_landingzone_parquet",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@replace(replace(item(), '[', ''), ']', '')",
													"type": "Expression"
												},
												"sourceSystem": "adventureworkslt"
											}
										}
									]
								},
								{
									"name": "Copy data from SQL to CSV",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_azuresql_adventureworkslt",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_adls_landingzone_csv",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@replace(replace(item(), '[', ''), ']', '')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data from SQL to JSON",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "dataset_azuresql_adventureworkslt",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_adls_landingzone_json",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@replace(replace(item(), '[', ''), ']', '')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileNames": {
						"type": "Array",
						"defaultValue": [
							"Allfiles/01/data/2019.csv",
							"Allfiles/01/data/2019.snappy.parquet",
							"Allfiles/01/data/2020.csv",
							"Allfiles/01/data/2020.snappy.parquet",
							"Allfiles/01/data/2021.csv",
							"Allfiles/01/data/2021.snappy.parquet",
							"Allfiles/01/data/SO43700.json",
							"Allfiles/01/data/SO43701.json",
							"Allfiles/01/data/SO43703.json",
							"Allfiles/01/data/SO43704.json",
							"Allfiles/01/data/SO43705.json",
							"Allfiles/03/data/DimAccount.fmt",
							"Allfiles/03/data/DimAccount.txt",
							"Allfiles/03/data/DimCurrency.fmt",
							"Allfiles/03/data/DimCurrency.txt",
							"Allfiles/03/data/DimCustomer.fmt",
							"Allfiles/03/data/DimCustomer.txt",
							"Allfiles/03/data/DimDate.fmt",
							"Allfiles/03/data/DimDate.txt",
							"Allfiles/03/data/DimDepartmentGroup.fmt",
							"Allfiles/03/data/DimDepartmentGroup.txt",
							"Allfiles/03/data/DimEmployee.fmt",
							"Allfiles/03/data/DimEmployee.txt",
							"Allfiles/03/data/DimGeography.fmt",
							"Allfiles/03/data/DimGeography.txt",
							"Allfiles/03/data/DimOrganization.fmt",
							"Allfiles/03/data/DimOrganization.txt",
							"Allfiles/03/data/DimProduct.fmt",
							"Allfiles/03/data/DimProduct.txt",
							"Allfiles/03/data/DimProductCategory.fmt",
							"Allfiles/03/data/DimProductCategory.txt",
							"Allfiles/03/data/DimProductSubCategory.fmt",
							"Allfiles/03/data/DimProductSubCategory.txt",
							"Allfiles/03/data/DimPromotion.fmt",
							"Allfiles/03/data/DimPromotion.txt",
							"Allfiles/03/data/DimReseller.fmt",
							"Allfiles/03/data/DimReseller.txt",
							"Allfiles/03/data/DimSalesTerritory.fmt",
							"Allfiles/03/data/DimSalesTerritory.txt",
							"Allfiles/03/data/FactInternetSales.fmt",
							"Allfiles/03/data/FactInternetSales.txt",
							"Allfiles/03/data/FactResellerSales.fmt",
							"Allfiles/03/data/FactResellerSales.txt",
							"Allfiles/04/data/AdventureWorksDWBuildVersion.fmt",
							"Allfiles/04/data/AdventureWorksDWBuildVersion.txt",
							"Allfiles/04/data/DimAccount.fmt",
							"Allfiles/04/data/DimAccount.txt",
							"Allfiles/04/data/DimCurrency.fmt",
							"Allfiles/04/data/DimCurrency.txt",
							"Allfiles/04/data/DimCustomer.fmt",
							"Allfiles/04/data/DimCustomer.txt",
							"Allfiles/04/data/DimDate.fmt",
							"Allfiles/04/data/DimDate.txt",
							"Allfiles/04/data/DimDepartmentGroup.fmt",
							"Allfiles/04/data/DimDepartmentGroup.txt",
							"Allfiles/04/data/DimEmployee.fmt",
							"Allfiles/04/data/DimEmployee.txt",
							"Allfiles/04/data/DimGeography.fmt",
							"Allfiles/04/data/DimGeography.txt",
							"Allfiles/04/data/DimOrganization.fmt",
							"Allfiles/04/data/DimOrganization.txt",
							"Allfiles/04/data/DimProduct.fmt",
							"Allfiles/04/data/DimProduct.txt",
							"Allfiles/04/data/DimProductCategory.fmt",
							"Allfiles/04/data/DimProductCategory.txt",
							"Allfiles/04/data/DimProductSubCategory.fmt",
							"Allfiles/04/data/DimProductSubCategory.txt",
							"Allfiles/04/data/DimPromotion.fmt",
							"Allfiles/04/data/DimPromotion.txt",
							"Allfiles/04/data/DimReseller.fmt",
							"Allfiles/04/data/DimReseller.txt",
							"Allfiles/04/data/DimSalesReason.fmt",
							"Allfiles/04/data/DimSalesReason.txt",
							"Allfiles/04/data/DimSalesTerritory.fmt",
							"Allfiles/04/data/DimSalesTerritory.txt",
							"Allfiles/04/data/DimScenario.fmt",
							"Allfiles/04/data/DimScenario.txt",
							"Allfiles/04/data/FactCallCenter.fmt",
							"Allfiles/04/data/FactCallCenter.txt",
							"Allfiles/04/data/FactCurrencyRate.fmt",
							"Allfiles/04/data/FactCurrencyRate.txt",
							"Allfiles/04/data/FactFinance.fmt",
							"Allfiles/04/data/FactFinance.txt",
							"Allfiles/04/data/FactInternetSales.fmt",
							"Allfiles/04/data/FactInternetSales.txt",
							"Allfiles/04/data/FactInternetSalesReason.fmt",
							"Allfiles/04/data/FactInternetSalesReason.txt",
							"Allfiles/04/data/FactProductInventory.fmt",
							"Allfiles/04/data/FactProductInventory.txt",
							"Allfiles/04/data/FactResellerSales.fmt",
							"Allfiles/04/data/FactResellerSales.txt",
							"Allfiles/04/data/FactSalesQuota.fmt",
							"Allfiles/04/data/FactSalesQuota.txt",
							"Allfiles/DatabaseBackup/AdventureWorksDW2022-DP500.bacpac"
						]
					},
					"sqlTableNames": {
						"type": "Array",
						"defaultValue": [
							"[SalesLT].[Customer]",
							"[SalesLT].[ProductModel]",
							"[SalesLT].[ProductDescription]",
							"[SalesLT].[Product]",
							"[SalesLT].[ProductModelProductDescription]",
							"[SalesLT].[ProductCategory]",
							"[SalesLT].[Address]",
							"[SalesLT].[CustomerAddress]",
							"[SalesLT].[SalesOrderDetail]",
							"[SalesLT].[SalesOrderHeader]"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dataset_github_dp_500')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_adls_landingzone_binary')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_azuresql_adventureworkslt')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_adls_landingzone_parquet')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_adls_landingzone_csv')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_adls_landingzone_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipeline_01_dwh')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachSqlTable",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('sqlTableNames')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy sql Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_azuresql_adventureworks_dwh",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_adls_landingzone_parquet",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@replace(replace(item(), '[', ''), ']', '')",
													"type": "Expression"
												},
												"sourceSystem": "adventureworksdwh"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"sqlTableNames": {
						"type": "Array",
						"defaultValue": [
							"DimAccount",
							"DimCurrency",
							"DimCustomer",
							"DimDate",
							"DimDepartmentGroup",
							"DimEmployee",
							"DimGeography",
							"DimOrganization",
							"DimProduct",
							"DimProductCategory",
							"DimProductSubcategory",
							"DimPromotion",
							"DimReseller",
							"DimSalesReason",
							"DimSalesTerritory",
							"DimScenario",
							"FactCallCenter",
							"FactCurrencyRate",
							"FactFinance",
							"FactInternetSales",
							"FactInternetSalesReason",
							"FactProductInventory",
							"FactResellerSales",
							"FactSalesQuota"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/dataset_azuresql_adventureworks_dwh')]",
				"[concat(variables('workspaceId'), '/datasets/dataset_adls_landingzone_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_adls_landingzone_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": {
							"value": "@replace(pipeline().DataFactory, 'synapse-', '')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/datalake_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_adls_landingzone_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": {
							"value": "@replace(pipeline().DataFactory, 'synapse-', '')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('adventureworkslt/tables/csv/', dataset().tableName, '.csv')",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/datalake_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_adls_landingzone_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": {
							"value": "@replace(pipeline().DataFactory, 'synapse-', '')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('adventureworkslt/tables/json/', dataset().tableName, '.json')",
							"type": "Expression"
						},
						"fileSystem": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/datalake_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_adls_landingzone_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": {
							"value": "@replace(pipeline().DataFactory, 'synapse-', '')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"sourceSystem": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().sourceSystem, '/tables/parquet/', dataset().tableName, '.parquet')",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/datalake_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_azuresql_adventureworks_dwh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adventureworksdw2022dp500_azuresqldatabase_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": "@replace(pipeline().DataFactory, 'synapse-', '')"
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/adventureworksdw2022dp500_azuresqldatabase_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_azuresql_adventureworkslt')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adventureworkslt_azuresqldatabase_linkedservice",
					"type": "LinkedServiceReference",
					"parameters": {
						"suffix": "@replace(pipeline().DataFactory, 'synapse-', '')"
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/adventureworkslt_azuresqldatabase_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataset_github_dp_500')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "github_dp_500_http_linkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().fileName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/github_dp_500_http_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adventureworksdw2022dp500_azuresqldatabase_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"suffix": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adventureworksdw2022dp500_azuresqldatabase_linkedservice_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyvault_linkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"suffix": "@linkedService().suffix"
							}
						},
						"secretName": "sqlpassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyvault_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adventureworkslt_azuresqldatabase_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"suffix": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('adventureworkslt_azuresqldatabase_linkedservice_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyvault_linkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"suffix": {
									"value": "@linkedService().suffix",
									"type": "Expression"
								}
							}
						},
						"secretName": "sqlpassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyvault_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datalake_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"suffix": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalake_linkedservice_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/github_dp_500_http_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('github_dp_500_http_linkedservice_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyvault_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"suffix": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyvault_linkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/power_bi_workspace_linkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "4ecb39c8-65f1-4cf9-afa3-e7847cb2f14c",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-6i6nkvrr23bng-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-6i6nkvrr23bng-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-selfhosted-integrationruntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_serverless_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This example shows how to query data from the datalake with CSV format. ",
				"content": {
					"query": "-- REMEMBER to replace the datalake account url\n\n\n-- Example: auto generated code (by right-click on a file name)\n-- Notice 1) column headers are not promoted\n-- Notice 2) have a look at the messages: \"Potential conversion error while reading VARCHAR column 'C1' from UTF8 encoded text. Change database collation to a UTF8 collation or specify explicit column schema in WITH clause and assign UTF8 collation to VARCHAR columns.\"\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/csv/SalesLT.Product.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n-- Example: Column headers promoted\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/csv/SalesLT.Product.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', \n        HEADER_ROW=TRUE\n    ) AS [result]\n\n-- Example: We can specify our own column names and data types\n-- Notice 1): External data type 'MONEY' is currently not supported. (need to replace to decimal)\n-- Notice 2): External data type 'DATETIME' is currently not supported. (need to replace to DATETIME2)\n-- Notice 3): External data type 'VARBINARY(MAX)' is currently not supported.\nSELECT TOP 100 \n    ProductID\n    , Name\n    , ProductNumber\n    , Color\n    , StandardCost\n    , ListPrice\n    , Size\n    , Weight\n    , ProductCategoryID\n    , ProductModelID\n    , SellStartDate\n    , SellEndDate\n    , DiscontinuedDate\n    --, ThumbNailPhoto\n    , ThumbnailPhotoFileName\n    , rowguid\n    , ModifiedDate\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/csv/SalesLT.Product.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', \n        HEADER_ROW=TRUE\n    )\n    WITH \n    (\n        ProductID INT,\n        Name NVARCHAR(50),\n        ProductNumber NVARCHAR(25),\n        Color NVARCHAR(15),\n        StandardCost DECIMAL, --not supported MONEY\n        ListPrice DECIMAL, --not supported MONEY\n        Size NVARCHAR(5),\n        Weight DECIMAL,\n        ProductCategoryID INT,\n        ProductModelID INT,\n        SellStartDate DATETIME2,\n        SellEndDate DATETIME2,\n        DiscontinuedDate DATETIME2,\n        --ThumbNailPhoto VARBINARY(max), --not supported VARBINARY\n        ThumbnailPhotoFileName NVARCHAR(50),\n        rowguid UNIQUEIDENTIFIER,\n        ModifiedDate DATETIME2\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_serverless_external_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This example shows how we can create external tables for all of the tables (based on PARQUET format)",
				"content": {
					"query": "-- Change database\nUSE AdventureWorksLTServerless\nGO\n\n-- Create a separate schema (optional)\nCREATE SCHEMA Ext\nGO\n\n-- Create external file format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\n-- Create external data source, pointing to the data lake\n-- Remember to change datalake url\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'DataLakeLandingZone') \n\tCREATE EXTERNAL DATA SOURCE [DataLakeLandingZone] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@datalake3mstaeetovkk4.dfs.core.windows.net' \n\t)\nGO\n\n-- Note: updated the data types to match the orginal (instead of relying on nvarchar(4000) all the time)\nCREATE EXTERNAL TABLE [Ext].[Address] (\n\t[AddressID] int,\n\t[AddressLine1] nvarchar(60),\n\t[AddressLine2] nvarchar(60),\n\t[City] nvarchar(30),\n\t[StateProvince] nvarchar(50),\n\t[CountryRegion] nvarchar(50),\n\t[PostalCode] nvarchar(15),\n\t[rowguid] UNIQUEIDENTIFIER,\n\t[ModifiedDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.Address.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[Customer] (\n\t[CustomerID] [int],\n\t[NameStyle] bit,\n\t[Title] [nvarchar](8),\n\t[FirstName] NVARCHAR(50),\n\t[MiddleName] nvarchar(50),\n\t[LastName] nvarchar(50),\n\t[Suffix] [nvarchar](10),\n\t[CompanyName] [nvarchar](128),\n\t[SalesPerson] [nvarchar](256),\n\t[EmailAddress] [nvarchar](50),\n\t[Phone] nvarchar(25),\n\t[PasswordHash] [varchar](128),\n\t[PasswordSalt] [varchar](10),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.Customer.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[CustomerAddress] (\n\t[CustomerID] [int],\n\t[AddressID] [int],\n\t[AddressType] nvarchar(50),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.CustomerAddress.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[Product] (\n\t[ProductID] [int],\n\t[Name] nvarchar(50),\n\t[ProductNumber] [nvarchar](25),\n\t[Color] [nvarchar](15),\n\t[StandardCost] [money],\n\t[ListPrice] [money],\n\t[Size] [nvarchar](5),\n\t[Weight] [decimal](8, 2),\n\t[ProductCategoryID] [int],\n\t[ProductModelID] [int],\n\t[SellStartDate] [datetime2](7),\n\t[SellEndDate] [datetime2](7),\n\t[DiscontinuedDate] [datetime2](7),\n\t[ThumbNailPhoto] [varbinary](max),\n\t[ThumbnailPhotoFileName] [nvarchar](50),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.Product.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[ProductCategory] (\n\t[ProductCategoryID] [int],\n\t[ParentProductCategoryID] [int],\n\t[Name] nvarchar(50),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.ProductCategory.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[ProductDescription] (\n\t[ProductDescriptionID] [int],\n\t[Description] [nvarchar](400),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.ProductDescription.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n-- Note xml data type is not supported (column CatalogDescription)\nCREATE EXTERNAL TABLE [Ext].[ProductModel] (\n\t[ProductModelID] [int],\n\t[Name] nvarchar(50),\n\t[CatalogDescription] nvarchar(4000),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.ProductModel.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[ProductModelProductDescription] (\n\t[ProductModelID] [int],\n\t[ProductDescriptionID] [int],\n\t[Culture] [nchar](6),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.ProductModelProductDescription.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n-- Notice linetotal is a calculated field (isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))\n-- Replaced with numeric(38,6)\nCREATE EXTERNAL TABLE [Ext].[SalesOrderDetail] (\n\t[SalesOrderID] [int],\n\t[SalesOrderDetailID] [int],\n\t[OrderQty] [smallint],\n\t[ProductID] [int],\n\t[UnitPrice] [money],\n\t[UnitPriceDiscount] [money],\n\t[LineTotal] numeric(38,6),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7)\n\n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.SalesOrderDetail.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE [Ext].[SalesOrderHeader] (\n\t[SalesOrderID] [int],\n\t[RevisionNumber] [tinyint],\n\t[OrderDate] [datetime2](7),\n\t[DueDate] [datetime2](7),\n\t[ShipDate] [datetime2](7),\n\t[Status] [tinyint],\n\t[OnlineOrderFlag] bit ,\n\t[SalesOrderNumber]  nvarchar(23),\n\t[PurchaseOrderNumber] nvarchar(25),\n\t[AccountNumber] nvarchar(15),\n\t[CustomerID] [int],\n\t[ShipToAddressID] [int],\n\t[BillToAddressID] [int],\n\t[ShipMethod] [nvarchar](50),\n\t[CreditCardApprovalCode] [varchar](15),\n\t[SubTotal] [money],\n\t[TaxAmt] [money],\n\t[Freight] [money],\n\t[TotalDue] numeric(19,4),\n\t[Comment] [nvarchar](400),\n\t[rowguid] [uniqueidentifier],\n\t[ModifiedDate] [datetime2](7) \n\t)\n\tWITH (\n\tLOCATION = 'adventureworkslt/tables/parquet/SalesLT.SalesOrderHeader.parquet',\n\tDATA_SOURCE = [DataLakeLandingZone],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM [Ext].[Address]\nSELECT TOP 100 * FROM [Ext].[Customer]\nSELECT TOP 100 * FROM [Ext].[CustomerAddress]\nSELECT TOP 100 * FROM [Ext].[Product]\nSELECT TOP 100 * FROM [Ext].[ProductCategory]\nSELECT TOP 100 * FROM [Ext].[ProductDescription]\nSELECT TOP 100 * FROM [Ext].[ProductModel]\nSELECT TOP 100 * FROM [Ext].[ProductModelProductDescription]\nSELECT TOP 100 * FROM [Ext].[SalesOrderDetail]\nSELECT TOP 100 * FROM [Ext].[SalesOrderHeader]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "AdventureWorksLTServerless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_serverless_json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This example shows how to query data from the datalake with JSON format. ",
				"content": {
					"query": "-- REMEMBER to replace the datalake account url\n\n-- EXAMPLE: select from JSON file. Here, we have explicitly defined the JSON_VALUE elements\nSELECT TOP 100\n      JSON_VALUE(jsonContent, '$.ProductID') as ProductId\n    , JSON_VALUE(jsonContent, '$.Name') as Name\n    , JSON_VALUE(jsonContent, '$.ProductNumber') as ProductNumber\n    , JSON_VALUE(jsonContent, '$.Color') as Color\n    , JSON_VALUE(jsonContent, '$.StandardCost') as StandardCost\n    , JSON_VALUE(jsonContent, '$.ListPrice') as ListPrice\n    , JSON_VALUE(jsonContent, '$.Size') as Size\n    , JSON_VALUE(jsonContent, '$.Weight') as Weight\n    , JSON_VALUE(jsonContent, '$.ProductCategoryID') as ProductCategoryID\n    , JSON_VALUE(jsonContent, '$.ProductModelID') as ProductModelID\n    , JSON_VALUE(jsonContent, '$.SellStartDate') as SellStartDate\n    , JSON_VALUE(jsonContent, '$.SellEndDate') as SellEndDate\n    , JSON_VALUE(jsonContent, '$.DiscontinuedDate') as DiscontinuedDate\n    , JSON_VALUE(jsonContent, '$.ThumbNailPhoto') as ThumbNailPhoto\n    , JSON_VALUE(jsonContent, '$.ThumbnailPhotoFileName') as ThumbnailPhotoFileName\n    , JSON_VALUE(jsonContent, '$.rowguid') as rowguid\n    , JSON_VALUE(jsonContent, '$.ModifiedDate') as ModifiedDate\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/json/SalesLT.Product.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b'\n        --ROWTERMINATOR = '0x0b' -- Doesn't work here as lines are separated by a newline (no comma)\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n\n\n\n-- EXAMPLE: We can specify our own column names and data types\nSELECT TOP 100 *\nFROM \n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/json/SalesLT.Product.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b'\n    )\n    WITH \n    (\n        jsonContent varchar(MAX)\n    ) AS [result]\n    CROSS APPLY openjson(jsonContent)\n        WITH \n        (\n            ProductID INT,\n            Name NVARCHAR(50),\n            ProductNumber NVARCHAR(25),\n            Color NVARCHAR(15),\n            StandardCost MONEY,\n            ListPrice MONEY,\n            Size NVARCHAR(5),\n            Weight DECIMAL,\n            ProductCategoryID INT,\n            ProductModelID INT,\n            SellStartDate DATETIME2,\n            SellEndDate DATETIME2,\n            DiscontinuedDate DATETIME2,\n            ThumbNailPhoto VARBINARY(max), \n            ThumbnailPhotoFileName NVARCHAR(50),\n            RowGuid UNIQUEIDENTIFIER '$.rowguid',   -- notice that we can override the name of the column\n            ModifiedDate DATETIME2\n        )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_serverless_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This example shows how to query data from the datalake with PARQUET format. ",
				"content": {
					"query": "-- REMEMBER to replace the datalake account url\n\n-- EXAMPLE: This is auto-generated code\n-- NOTICE: we do not need to specify data types (inferred from parquet file)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.Product.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n-- EXAMPLE: We can specify our own column names and data types\n-- NOTICE this will read only the column name we specify (improve performance)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.Product.parquet',\n        FORMAT = 'PARQUET'\n    )\n    WITH \n    (\n        ProductID INT,\n        Name NVARCHAR(50),\n        ProductNumber NVARCHAR(25),\n        Color NVARCHAR(15)\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_serverless_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This example shows how we can create views for all of the tables (based on PARQUET format)",
				"content": {
					"query": "-- Do this only once!\nCREATE DATABASE AdventureWorksLTServerless\n\n-- Change database\nUSE AdventureWorksLTServerless\nGO\n\n-- Create a separate schema (optional)\nCREATE SCHEMA SalesLT\nGO\n\n-- Create views for every tables, based on PARQUET format\nCREATE VIEW SalesLT.Address AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.Address.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.Customer AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.Customer.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.CustomerAddress AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.CustomerAddress.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.Product AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.Product.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.ProductCategory AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.ProductCategory.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.ProductDescription AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.ProductDescription.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.ProductModel AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.ProductModel.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.ProductModelProductDescription AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.ProductModelProductDescription.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.SalesOrderDetail AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.SalesOrderDetail.parquet', FORMAT = 'PARQUET') AS [result]\nGO\nCREATE VIEW SalesLT.SalesOrderHeader AS SELECT * FROM OPENROWSET(BULK 'https://datalake3mstaeetovkk4.dfs.core.windows.net/landing/adventureworkslt/tables/parquet/SalesLT.SalesOrderHeader.parquet', FORMAT = 'PARQUET') AS [result]\nGO\n\n-- PLAYGROUND: Confirm data can be retrieved\nSELECT TOP 100 * FROM SalesLT.Address\nSELECT TOP 100 * FROM SalesLT.Customer\nSELECT TOP 100 * FROM SalesLT.CustomerAddress\nSELECT TOP 100 * FROM SalesLT.Product\nSELECT TOP 100 * FROM SalesLT.ProductCategory\nSELECT TOP 100 * FROM SalesLT.ProductDescription\nSELECT TOP 100 * FROM SalesLT.ProductModel\nSELECT TOP 100 * FROM SalesLT.ProductModelProductDescription\nSELECT TOP 100 * FROM SalesLT.SalesOrderDetail\nSELECT TOP 100 * FROM SalesLT.SalesOrderHeader\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "AdventureWorksLTServerless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsespark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		}
	]
}